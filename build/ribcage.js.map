{"version":3,"file":"ribcage.js","sources":["../vendor/underscore/underscore.js","../vendor/backbone/backbone.js","region.js","layout.js","ribcage.js"],"names":[],"mappings":"CAKA,WAMA,GAAA,GAAA,KAGA,EAAA,EAAA,EAGA,EAAA,MAAA,UAAA,EAAA,OAAA,UAAA,EAAA,SAAA,UAIA,EAAA,EAAA,KACA,EAAA,EAAA,MACA,EAAA,EAAA,OACA,EAAA,EAAA,SACA,EAAA,EAAA,eAKA,EAAA,MAAA,QACA,EAAA,OAAA,KACA,EAAA,EAAA,KAGA,EAAA,SAAA,GACA,MAAA,aAAA,GAAA,EACA,eAAA,QACA,KAAA,SAAA,GADA,GAAA,GAAA,GAOA,oBAAA,UACA,mBAAA,SAAA,OAAA,UACA,QAAA,OAAA,QAAA,GAEA,QAAA,EAAA,GAEA,EAAA,EAAA,EAIA,EAAA,QAAA,OAKA,IAAA,GAAA,SAAA,EAAA,EAAA,GACA,GAAA,SAAA,EAAA,MAAA,EACA,QAAA,MAAA,EAAA,EAAA,GACA,IAAA,GAAA,MAAA,UAAA,GACA,MAAA,GAAA,KAAA,EAAA,GAEA,KAAA,GAAA,MAAA,UAAA,EAAA,GACA,MAAA,GAAA,KAAA,EAAA,EAAA,GAEA,KAAA,GAAA,MAAA,UAAA,EAAA,EAAA,GACA,MAAA,GAAA,KAAA,EAAA,EAAA,EAAA,GAEA,KAAA,GAAA,MAAA,UAAA,EAAA,EAAA,EAAA,GACA,MAAA,GAAA,KAAA,EAAA,EAAA,EAAA,EAAA,IAGA,MAAA,YACA,MAAA,GAAA,MAAA,EAAA,YAOA,GAAA,SAAA,SAAA,EAAA,EAAA,GACA,MAAA,OAAA,EAAA,EAAA,SACA,EAAA,WAAA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,SAAA,GAAA,EAAA,QAAA,GACA,EAAA,SAAA,IASA,EAAA,KAAA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,GAAA,MAAA,EAAA,MAAA,EACA,GAAA,EAAA,EAAA,EACA,IAAA,GAAA,EAAA,EAAA,MACA,IAAA,KAAA,EACA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,OAEA,CACA,GAAA,GAAA,EAAA,KAAA,EACA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,GAGA,MAAA,IAIA,EAAA,IAAA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,GAAA,MAAA,EAAA,QACA,GAAA,EAAA,SAAA,EAAA,EAKA,KAAA,GADA,GAHA,EAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,GACA,GAAA,GAAA,GAAA,OACA,EAAA,MAAA,GAEA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAEA,OAAA,GAGA,IAAA,GAAA,6CAIA,GAAA,OAAA,EAAA,MAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,IAAA,MACA,EAAA,EAAA,EAAA,EAAA,EACA,IAEA,GAFA,EAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,GACA,GAAA,GAAA,GAAA,OACA,EAAA,CACA,IAAA,UAAA,OAAA,EAAA,CACA,IAAA,EAAA,KAAA,IAAA,WAAA,EACA,GAAA,EAAA,EAAA,EAAA,KAAA,KAEA,KAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAEA,OAAA,IAIA,EAAA,YAAA,EAAA,MAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,IAAA,MACA,EAAA,EAAA,EAAA,EAAA,EACA,IAEA,GAFA,EAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,GACA,GAAA,GAAA,GAAA,MAEA,IAAA,UAAA,OAAA,EAAA,CACA,IAAA,EAAA,KAAA,IAAA,WAAA,EACA,GAAA,EAAA,EAAA,IAAA,KAAA,GAEA,KAAA,KACA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAEA,OAAA,IAIA,EAAA,KAAA,EAAA,OAAA,SAAA,EAAA,EAAA,GACA,GAAA,EAQA,OAPA,GAAA,EAAA,SAAA,EAAA,GACA,EAAA,KAAA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,EAAA,EAAA,IACA,EAAA,GACA,GAFA,SAKA,GAKA,EAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,GACA,GAAA,KACA,OAAA,OAAA,EAAA,GACA,EAAA,EAAA,SAAA,EAAA,GACA,EAAA,KAAA,EAAA,SAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,KAEA,IAIA,EAAA,OAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,OAAA,EAAA,EAAA,OAAA,EAAA,SAAA,IAAA,IAKA,EAAA,MAAA,EAAA,IAAA,SAAA,EAAA,EAAA,GACA,GAAA,MAAA,EAAA,OAAA,CACA,GAAA,EAAA,SAAA,EAAA,EACA,IAEA,GAAA,EAFA,EAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,GACA,GAAA,GAAA,GAAA,MAEA,KAAA,EAAA,EAAA,EAAA,EAAA,IAEA,GADA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,CAEA,QAAA,GAKA,EAAA,KAAA,EAAA,IAAA,SAAA,EAAA,EAAA,GACA,GAAA,MAAA,EAAA,OAAA,CACA,GAAA,EAAA,SAAA,EAAA,EACA,IAEA,GAAA,EAFA,EAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,GACA,GAAA,GAAA,GAAA,MAEA,KAAA,EAAA,EAAA,EAAA,EAAA,IAEA,GADA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,CAEA,QAAA,GAKA,EAAA,SAAA,EAAA,QAAA,SAAA,EAAA,GACA,MAAA,OAAA,GAAA,GACA,EAAA,UAAA,EAAA,SAAA,EAAA,EAAA,OAAA,IACA,EAAA,QAAA,EAAA,IAAA,IAIA,EAAA,OAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,UAAA,GACA,EAAA,EAAA,WAAA,EACA,OAAA,GAAA,IAAA,EAAA,SAAA,GACA,OAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,MAKA,EAAA,MAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,EAAA,EAAA,SAAA,KAKA,EAAA,MAAA,SAAA,EAAA,GACA,MAAA,GAAA,OAAA,EAAA,EAAA,QAAA,KAKA,EAAA,UAAA,SAAA,EAAA,GACA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,KAIA,EAAA,IAAA,SAAA,EAAA,EAAA,GACA,GACA,GAAA,EADA,GAAA,IAAA,GAAA,GAEA,IAAA,MAAA,GAAA,MAAA,EAAA,CACA,EAAA,EAAA,UAAA,EAAA,OAAA,EAAA,EAAA,OAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,IACA,EAAA,OAIA,GAAA,EAAA,SAAA,EAAA,GACA,EAAA,KAAA,EAAA,SAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,KAAA,KAAA,KAAA,OACA,EAAA,EACA,EAAA,IAIA,OAAA,IAIA,EAAA,IAAA,SAAA,EAAA,EAAA,GACA,GACA,GAAA,EADA,EAAA,IAAA,EAAA,GAEA,IAAA,MAAA,GAAA,MAAA,EAAA,CACA,EAAA,EAAA,UAAA,EAAA,OAAA,EAAA,EAAA,OAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,IACA,EAAA,OAIA,GAAA,EAAA,SAAA,EAAA,GACA,EAAA,KAAA,EAAA,SAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,MAAA,GAAA,MAAA,KACA,EAAA,EACA,EAAA,IAIA,OAAA,IAKA,EAAA,QAAA,SAAA,GAIA,IAAA,GAAA,GAHA,EAAA,GAAA,EAAA,UAAA,EAAA,OAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,OACA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,OAAA,EAAA,GACA,IAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,EAAA,EAEA,OAAA,IAMA,EAAA,OAAA,SAAA,EAAA,EAAA,GACA,MAAA,OAAA,GAAA,GACA,EAAA,UAAA,EAAA,SAAA,EAAA,EAAA,OAAA,IACA,EAAA,EAAA,OAAA,EAAA,OAAA,KAEA,EAAA,QAAA,GAAA,MAAA,EAAA,KAAA,IAAA,EAAA,KAIA,EAAA,OAAA,SAAA,EAAA,EAAA,GAEA,MADA,GAAA,EAAA,SAAA,EAAA,GACA,EAAA,MAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GACA,OACA,MAAA,EACA,MAAA,EACA,SAAA,EAAA,EAAA,EAAA,MAEA,KAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,SACA,EAAA,EAAA,QACA,IAAA,IAAA,EAAA,CACA,GAAA,EAAA,GAAA,SAAA,EAAA,MAAA,EACA,IAAA,EAAA,GAAA,SAAA,EAAA,MAAA,GAEA,MAAA,GAAA,MAAA,EAAA,QACA,SAIA,IAAA,GAAA,SAAA,GACA,MAAA,UAAA,EAAA,EAAA,GACA,GAAA,KAMA,OALA,GAAA,EAAA,SAAA,EAAA,GACA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,KAEA,GAMA,GAAA,QAAA,EAAA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,KAAA,GAAA,EAAA,IAAA,KAKA,EAAA,QAAA,EAAA,SAAA,EAAA,EAAA,GACA,EAAA,GAAA,IAMA,EAAA,QAAA,EAAA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,IAKA,EAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,SAAA,EAAA,EAAA,EAGA,KAFA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,OACA,EAAA,GAAA,CACA,GAAA,GAAA,EAAA,IAAA,CACA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAEA,MAAA,IAIA,EAAA,QAAA,SAAA,GACA,MAAA,GACA,EAAA,QAAA,GAAA,EAAA,KAAA,GACA,EAAA,UAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,UACA,EAAA,OAAA,OAIA,EAAA,KAAA,SAAA,GACA,MAAA,OAAA,EAAA,EACA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,GAAA,QAKA,EAAA,UAAA,SAAA,EAAA,EAAA,GACA,EAAA,EAAA,SAAA,EAAA,EACA,IAAA,MAAA,IAIA,OAHA,GAAA,KAAA,EAAA,SAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,KAAA,MAEA,EAAA,IASA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,SAAA,EAAA,EAAA,GACA,MAAA,OAAA,EAAA,OACA,MAAA,GAAA,EAAA,EAAA,GACA,EAAA,KACA,EAAA,KAAA,EAAA,EAAA,IAOA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,KAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,EAAA,MAKA,EAAA,KAAA,SAAA,EAAA,EAAA,GACA,MAAA,OAAA,EAAA,OACA,MAAA,GAAA,EAAA,EAAA,EAAA,OAAA,GACA,EAAA,KAAA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,KAOA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,KAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAIA,EAAA,QAAA,SAAA,GACA,MAAA,GAAA,OAAA,EAAA,EAAA,UAIA,IAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,MAAA,EAAA,EAAA,SACA,MAAA,GAAA,MAAA,EAAA,EAEA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,EAAA,EACA,GAAA,QAAA,IAAA,EAAA,YAAA,GAEA,EACA,EAAA,MAAA,EAAA,GAEA,EAAA,EAAA,EAAA,EAAA,GAJA,GAAA,EAAA,KAAA,GAOA,MAAA,GAIA,GAAA,QAAA,SAAA,EAAA,GACA,MAAA,GAAA,EAAA,GAAA,OAIA,EAAA,QAAA,SAAA,GACA,MAAA,GAAA,WAAA,EAAA,EAAA,KAAA,UAAA,KAMA,EAAA,KAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,MAAA,EAAA,QACA,GAAA,UAAA,KACA,EAAA,EACA,EAAA,EACA,GAAA,GAEA,MAAA,IAAA,EAAA,EAAA,SAAA,EAAA,GAGA,KAAA,GAFA,MACA,KACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,EAAA,EACA,IAAA,EACA,GAAA,IAAA,GAAA,EAAA,KAAA,GACA,EAAA,MACA,IAAA,EAAA,CACA,GAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAAA,QAAA,EAAA,GAAA,IACA,EAAA,KAAA,GACA,EAAA,KAAA,QAEA,GAAA,QAAA,EAAA,GAAA,GACA,EAAA,KAAA,GAGA,MAAA,IAKA,EAAA,MAAA,WACA,MAAA,GAAA,KAAA,EAAA,WAAA,GAAA,QAKA,EAAA,aAAA,SAAA,GACA,GAAA,MAAA,EAAA,QAGA,KAAA,GAFA,MACA,EAAA,UAAA,OACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,EAAA,EACA,KAAA,EAAA,SAAA,EAAA,GAAA,CACA,IAAA,GAAA,GAAA,EAAA,EAAA,GACA,EAAA,SAAA,UAAA,GAAA,GADA,KAGA,IAAA,GAAA,EAAA,KAAA,IAEA,MAAA,IAKA,EAAA,WAAA,SAAA,GACA,GAAA,GAAA,EAAA,EAAA,KAAA,UAAA,IAAA,GAAA,KACA,OAAA,GAAA,OAAA,EAAA,SAAA,GACA,OAAA,EAAA,SAAA,EAAA,MAMA,EAAA,IAAA,SAAA,GACA,GAAA,MAAA,EAAA,QAGA,KAAA,GAFA,GAAA,EAAA,IAAA,UAAA,UAAA,OACA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,MAAA,UAAA,EAEA,OAAA,IAMA,EAAA,OAAA,SAAA,EAAA,GACA,GAAA,MAAA,EAAA,QAEA,KAAA,GADA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EACA,EAAA,EAAA,IAAA,EAAA,GAEA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,EAGA,OAAA,IAOA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,GAAA,MAAA,EAAA,MAAA,EACA,IAAA,GAAA,EAAA,EAAA,EAAA,MACA,IAAA,EAAA,CACA,GAAA,gBAAA,GAIA,MADA,GAAA,EAAA,YAAA,EAAA,GACA,EAAA,KAAA,EAAA,EAAA,EAHA,GAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAMA,KAAA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EACA,OAAA,IAGA,EAAA,YAAA,SAAA,EAAA,EAAA,GACA,GAAA,MAAA,EAAA,MAAA,EACA,IAAA,GAAA,EAAA,MAIA,KAHA,gBAAA,KACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,MAEA,GAAA,GAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EACA,OAAA,IAMA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,UAAA,QAAA,IACA,EAAA,GAAA,EACA,EAAA,GAEA,EAAA,GAAA,CAKA,KAAA,GAHA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,GAAA,GAAA,GACA,EAAA,MAAA,GAEA,EAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EACA,EAAA,GAAA,CAGA,OAAA,GAOA,IAAA,GAAA,YAKA,GAAA,KAAA,SAAA,EAAA,GACA,GAAA,GAAA,CACA,IAAA,GAAA,EAAA,OAAA,EAAA,MAAA,GAAA,MAAA,EAAA,EAAA,KAAA,UAAA,GACA,KAAA,EAAA,WAAA,GAAA,KAAA,IAAA,WAAA,oCAWA,OAVA,GAAA,EAAA,KAAA,UAAA,GACA,EAAA,WACA,KAAA,eAAA,IAAA,MAAA,GAAA,MAAA,EAAA,EAAA,OAAA,EAAA,KAAA,YACA,GAAA,UAAA,EAAA,SACA,IAAA,GAAA,GAAA,EACA,GAAA,UAAA,IACA,IAAA,GAAA,EAAA,MAAA,EAAA,EAAA,OAAA,EAAA,KAAA,YACA,OAAA,GAAA,SAAA,GAAA,EACA,IAQA,EAAA,QAAA,SAAA,GACA,GAAA,GAAA,EAAA,KAAA,UAAA,EACA,OAAA,YAGA,IAAA,GAFA,GAAA,EACA,EAAA,EAAA,QACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,KAAA,IAAA,EAAA,GAAA,UAAA,KAEA,MAAA,EAAA,UAAA,QAAA,EAAA,KAAA,UAAA,KACA,OAAA,GAAA,MAAA,KAAA,KAOA,EAAA,QAAA,SAAA,GACA,GAAA,GAAA,EAAA,EAAA,UAAA,MACA,IAAA,GAAA,EAAA,KAAA,IAAA,OAAA,wCACA,KAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,UAAA,GACA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAEA,OAAA,IAIA,EAAA,QAAA,SAAA,EAAA,GACA,GAAA,GAAA,SAAA,GACA,GAAA,GAAA,EAAA,MACA,EAAA,EAAA,EAAA,MAAA,KAAA,WAAA,CAEA,OADA,GAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,KAAA,YACA,EAAA,GAGA,OADA,GAAA,SACA,GAKA,EAAA,MAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,UAAA,EACA,OAAA,YAAA,WACA,MAAA,GAAA,MAAA,KAAA,IACA,IAKA,EAAA,MAAA,SAAA,GACA,MAAA,GAAA,MAAA,MAAA,GAAA,EAAA,GAAA,OAAA,EAAA,KAAA,UAAA,MAQA,EAAA,SAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EACA,EAAA,KACA,EAAA,CACA,KAAA,KACA,IAAA,GAAA,WACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,MACA,EAAA,KACA,EAAA,EAAA,MAAA,EAAA,GACA,IAAA,EAAA,EAAA,MAEA,OAAA,YACA,GAAA,GAAA,EAAA,KACA,IAAA,EAAA,WAAA,IAAA,EAAA,EACA,IAAA,GAAA,GAAA,EAAA,EAYA,OAXA,GAAA,KACA,EAAA,UACA,GAAA,GAAA,EAAA,GACA,aAAA,GACA,EAAA,KACA,EAAA,EACA,EAAA,EAAA,MAAA,EAAA,GACA,IAAA,EAAA,EAAA,OACA,GAAA,EAAA,YAAA,IACA,EAAA,WAAA,EAAA,IAEA,IAQA,EAAA,SAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAEA,EAAA,WACA,GAAA,GAAA,EAAA,MAAA,CAEA,GAAA,GAAA,EAAA,EACA,EAAA,WAAA,EAAA,EAAA,IAEA,EAAA,KACA,IACA,EAAA,EAAA,MAAA,EAAA,GACA,IAAA,EAAA,EAAA,QAKA,OAAA,YACA,EAAA,KACA,EAAA,UACA,EAAA,EAAA,KACA,IAAA,GAAA,IAAA,CAOA,OANA,KAAA,EAAA,WAAA,EAAA,IACA,IACA,EAAA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,MAGA,IAOA,EAAA,KAAA,SAAA,EAAA,GACA,MAAA,GAAA,QAAA,EAAA,IAIA,EAAA,OAAA,SAAA,GACA,MAAA,YACA,OAAA,EAAA,MAAA,KAAA,aAMA,EAAA,QAAA,WACA,GAAA,GAAA,UACA,EAAA,EAAA,OAAA,CACA,OAAA,YAGA,IAFA,GAAA,GAAA,EACA,EAAA,EAAA,GAAA,MAAA,KAAA,WACA,KAAA,EAAA,EAAA,GAAA,KAAA,KAAA,EACA,OAAA,KAKA,EAAA,MAAA,SAAA,EAAA,GACA,MAAA,YACA,QAAA,EAAA,EACA,EAAA,MAAA,KAAA,WADA,SAOA,EAAA,OAAA,SAAA,EAAA,GACA,GAAA,EACA,OAAA,YAMA,QALA,EAAA,EACA,EAAA,EAAA,MAAA,KAAA,WAEA,EAAA,KAEA,IAMA,EAAA,KAAA,EAAA,QAAA,EAAA,OAAA,GAOA,EAAA,KAAA,SAAA,GACA,IAAA,EAAA,SAAA,GAAA,QACA,IAAA,EAAA,MAAA,GAAA,EACA,IAAA,KACA,KAAA,GAAA,KAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EACA,OAAA,IAIA,EAAA,OAAA,SAAA,GAIA,IAAA,GAHA,GAAA,EAAA,KAAA,GACA,EAAA,EAAA,OACA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,EAAA,GAEA,OAAA,IAIA,EAAA,MAAA,SAAA,GAIA,IAAA,GAHA,GAAA,EAAA,KAAA,GACA,EAAA,EAAA,OACA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,IAEA,OAAA,IAIA,EAAA,OAAA,SAAA,GAGA,IAAA,GAFA,MACA,EAAA,EAAA,KAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,KAAA,EAAA,EAEA,OAAA,IAKA,EAAA,UAAA,EAAA,QAAA,SAAA,GACA,GAAA,KACA,KAAA,GAAA,KAAA,GACA,EAAA,WAAA,EAAA,KAAA,EAAA,KAAA,EAEA,OAAA,GAAA,QAIA,EAAA,OAAA,SAAA,GACA,IAAA,EAAA,SAAA,GAAA,MAAA,EAEA,KAAA,GADA,GAAA,EACA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,CACA,EAAA,UAAA,EACA,KAAA,IAAA,GACA,EAAA,KAAA,EAAA,KACA,EAAA,GAAA,EAAA,IAIA,MAAA,IAIA,EAAA,KAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,IACA,IAAA,MAAA,EAAA,MAAA,EACA,IAAA,EAAA,WAAA,GAAA,CACA,EAAA,EAAA,EAAA,EACA,KAAA,IAAA,GAAA,CACA,GAAA,GAAA,EAAA,EACA,GAAA,EAAA,EAAA,KAAA,EAAA,GAAA,QAEA,CACA,GAAA,GAAA,EAAA,SAAA,EAAA,KAAA,UAAA,GACA,GAAA,GAAA,QAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,GACA,IAAA,KAAA,EAAA,GAAA,EAAA,IAGA,MAAA,IAIA,EAAA,KAAA,SAAA,EAAA,EAAA,GACA,GAAA,EAAA,WAAA,GACA,EAAA,EAAA,OAAA,OACA,CACA,GAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,KAAA,UAAA,IAAA,OACA,GAAA,SAAA,EAAA,GACA,OAAA,EAAA,SAAA,EAAA,IAGA,MAAA,GAAA,KAAA,EAAA,EAAA,IAIA,EAAA,SAAA,SAAA,GACA,IAAA,EAAA,SAAA,GAAA,MAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,UAAA,EACA,KAAA,GAAA,KAAA,GACA,SAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAGA,MAAA,IAIA,EAAA,MAAA,SAAA,GACA,MAAA,GAAA,SAAA,GACA,EAAA,QAAA,GAAA,EAAA,QAAA,EAAA,UAAA,GADA,GAOA,EAAA,IAAA,SAAA,EAAA,GAEA,MADA,GAAA,GACA,EAIA,IAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAGA,GAAA,IAAA,EAAA,MAAA,KAAA,GAAA,EAAA,IAAA,EAAA,CAEA,IAAA,MAAA,GAAA,MAAA,EAAA,MAAA,KAAA,CAEA,aAAA,KAAA,EAAA,EAAA,UACA,YAAA,KAAA,EAAA,EAAA,SAEA,IAAA,GAAA,EAAA,KAAA,EACA,IAAA,IAAA,EAAA,KAAA,GAAA,OAAA,CACA,QAAA,GAEA,IAAA,kBAEA,IAAA,kBAGA,MAAA,GAAA,GAAA,GAAA,CACA,KAAA,kBAGA,OAAA,KAAA,GAAA,KAAA,EAEA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,CACA,KAAA,gBACA,IAAA,mBAIA,OAAA,KAAA,EAEA,GAAA,gBAAA,IAAA,gBAAA,GAAA,OAAA,CAIA,KADA,GAAA,GAAA,EAAA,OACA,KAGA,GAAA,EAAA,KAAA,EAAA,MAAA,GAAA,KAAA,CAIA,IAAA,GAAA,EAAA,YAAA,EAAA,EAAA,WACA,IACA,IAAA,GAEA,eAAA,IAAA,eAAA,MACA,EAAA,WAAA,IAAA,YAAA,IACA,EAAA,WAAA,IAAA,YAAA,IAEA,OAAA,CAGA,GAAA,KAAA,GACA,EAAA,KAAA,EACA,IAAA,GAAA,CAEA,IAAA,mBAAA,GAIA,GAFA,EAAA,EAAA,OACA,EAAA,IAAA,EAAA,OAGA,KAAA,MACA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,WAGA,CAEA,GAAA,GAAA,EAAA,EAAA,KAAA,EAIA,IAHA,EAAA,EAAA,OAEA,EAAA,EAAA,KAAA,GAAA,SAAA,EAEA,KAAA,MAEA,EAAA,EAAA,GACA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAOA,MAFA,GAAA,MACA,EAAA,MACA,EAIA,GAAA,QAAA,SAAA,EAAA,GACA,MAAA,GAAA,EAAA,UAKA,EAAA,QAAA,SAAA,GACA,GAAA,MAAA,EAAA,OAAA,CACA,IAAA,EAAA,QAAA,IAAA,EAAA,SAAA,IAAA,EAAA,YAAA,GAAA,MAAA,KAAA,EAAA,MACA,KAAA,GAAA,KAAA,GAAA,GAAA,EAAA,IAAA,EAAA,GAAA,OAAA,CACA,QAAA,GAIA,EAAA,UAAA,SAAA,GACA,SAAA,GAAA,IAAA,EAAA,WAKA,EAAA,QAAA,GAAA,SAAA,GACA,MAAA,mBAAA,EAAA,KAAA,IAIA,EAAA,SAAA,SAAA,GACA,GAAA,SAAA,EACA,OAAA,aAAA,GAAA,WAAA,KAAA,GAIA,EAAA,MAAA,YAAA,WAAA,SAAA,SAAA,OAAA,UAAA,SAAA,GACA,EAAA,KAAA,GAAA,SAAA,GACA,MAAA,GAAA,KAAA,KAAA,WAAA,EAAA,OAMA,EAAA,YAAA,aACA,EAAA,YAAA,SAAA,GACA,MAAA,GAAA,IAAA,EAAA,YAKA,kBAAA,MACA,EAAA,WAAA,SAAA,GACA,MAAA,kBAAA,KAAA,IAKA,EAAA,SAAA,SAAA,GACA,MAAA,UAAA,KAAA,MAAA,WAAA,KAIA,EAAA,MAAA,SAAA,GACA,MAAA,GAAA,SAAA,IAAA,KAAA,GAIA,EAAA,UAAA,SAAA,GACA,MAAA,MAAA,GAAA,KAAA,GAAA,qBAAA,EAAA,KAAA,IAIA,EAAA,OAAA,SAAA,GACA,MAAA,QAAA,GAIA,EAAA,YAAA,SAAA,GACA,MAAA,UAAA,GAKA,EAAA,IAAA,SAAA,EAAA,GACA,MAAA,OAAA,GAAA,EAAA,KAAA,EAAA,IAQA,EAAA,WAAA,WAEA,MADA,GAAA,EAAA,EACA,MAIA,EAAA,SAAA,SAAA,GACA,MAAA,IAGA,EAAA,SAAA,SAAA,GACA,MAAA,YACA,MAAA,KAIA,EAAA,KAAA,aAEA,EAAA,SAAA,SAAA,GACA,MAAA,UAAA,GACA,MAAA,GAAA,KAKA,EAAA,QAAA,SAAA,GACA,GAAA,GAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MACA,OAAA,UAAA,GACA,GAAA,MAAA,EAAA,OAAA,CACA,GAAA,GAAA,QAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EACA,IAAA,EAAA,KAAA,EAAA,MAAA,IAAA,IAAA,OAAA,EAEA,OAAA,IAKA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,MAAA,KAAA,IAAA,EAAA,GACA,GAAA,EAAA,EAAA,EAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EACA,OAAA,IAIA,EAAA,OAAA,SAAA,EAAA,GAKA,MAJA,OAAA,IACA,EAAA,EACA,EAAA,GAEA,EAAA,KAAA,MAAA,KAAA,UAAA,EAAA,EAAA,KAIA,EAAA,IAAA,KAAA,KAAA,WACA,OAAA,GAAA,OAAA,UAIA,IAAA,IACA,IAAA,QACA,IAAA,OACA,IAAA,OACA,IAAA,SACA,IAAA,SACA,IAAA,UAEA,EAAA,EAAA,OAAA,GAGA,EAAA,SAAA,GACA,GAAA,GAAA,SAAA,GACA,MAAA,GAAA,IAGA,EAAA,MAAA,EAAA,KAAA,GAAA,KAAA,KAAA,IACA,EAAA,OAAA,GACA,EAAA,OAAA,EAAA,IACA,OAAA,UAAA,GAEA,MADA,GAAA,MAAA,EAAA,GAAA,GAAA,EACA,EAAA,KAAA,GAAA,EAAA,QAAA,EAAA,GAAA,GAGA,GAAA,OAAA,EAAA,GACA,EAAA,SAAA,EAAA,GAIA,EAAA,OAAA,SAAA,EAAA,GACA,GAAA,MAAA,EAAA,MAAA,OACA,IAAA,GAAA,EAAA,EACA,OAAA,GAAA,WAAA,GAAA,EAAA,KAAA,EAKA,IAAA,GAAA,CACA,GAAA,SAAA,SAAA,GACA,GAAA,KAAA,EAAA,EACA,OAAA,GAAA,EAAA,EAAA,GAKA,EAAA,kBACA,SAAA,kBACA,YAAA,mBACA,OAAA,mBAMA,IAAA,GAAA,OAIA,GACA,IAAA,IACA,KAAA,KACA,KAAA,IACA,KAAA,IACA,SAAA,QACA,SAAA,SAGA,EAAA,4BAEA,EAAA,SAAA,GACA,MAAA,KAAA,EAAA,GAOA,GAAA,SAAA,SAAA,EAAA,EAAA,IACA,GAAA,IAAA,EAAA,GACA,EAAA,EAAA,YAAA,EAAA,EAAA,iBAGA,IAAA,GAAA,SACA,EAAA,QAAA,GAAA,QACA,EAAA,aAAA,GAAA,QACA,EAAA,UAAA,GAAA,QACA,KAAA,KAAA,KAAA,KAGA,EAAA,EACA,EAAA,QACA,GAAA,QAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAaA,MAZA,IAAA,EAAA,MAAA,EAAA,GAAA,QAAA,EAAA,GACA,EAAA,EAAA,EAAA,OAEA,EACA,GAAA,cAAA,EAAA,iCACA,EACA,GAAA,cAAA,EAAA,uBACA,IACA,GAAA,OAAA,EAAA,YAIA,IAEA,GAAA,OAGA,EAAA,WAAA,EAAA,mBAAA,EAAA,OAEA,EAAA,4FAEA,EAAA,eAEA,KACA,GAAA,GAAA,GAAA,UAAA,EAAA,UAAA,MAAA,IAAA,GACA,MAAA,GAEA,KADA,GAAA,OAAA,EACA,EAGA,GAAA,GAAA,SAAA,GACA,MAAA,GAAA,KAAA,KAAA,EAAA,IAIA,EAAA,EAAA,UAAA,KAGA,OAFA,GAAA,OAAA,YAAA,EAAA,OAAA,EAAA,IAEA,GAIA,EAAA,MAAA,SAAA,GACA,GAAA,GAAA,EAAA,EAEA,OADA,GAAA,QAAA,EACA,EAUA,IAAA,GAAA,SAAA,GACA,MAAA,MAAA,OAAA,EAAA,GAAA,QAAA,EAIA,GAAA,MAAA,SAAA,GACA,EAAA,KAAA,EAAA,UAAA,GAAA,SAAA,GACA,GAAA,GAAA,EAAA,GAAA,EAAA,EACA,GAAA,UAAA,GAAA,WACA,GAAA,IAAA,KAAA,SAEA,OADA,GAAA,MAAA,EAAA,WACA,EAAA,KAAA,KAAA,EAAA,MAAA,EAAA,QAMA,EAAA,MAAA,GAGA,EAAA,MAAA,MAAA,OAAA,UAAA,QAAA,OAAA,SAAA,WAAA,SAAA,GACA,GAAA,GAAA,EAAA,EACA,GAAA,UAAA,GAAA,WACA,GAAA,GAAA,KAAA,QAGA,OAFA,GAAA,MAAA,EAAA,WACA,UAAA,GAAA,WAAA,GAAA,IAAA,EAAA,cAAA,GAAA,GACA,EAAA,KAAA,KAAA,MAKA,EAAA,MAAA,SAAA,OAAA,SAAA,SAAA,GACA,GAAA,GAAA,EAAA,EACA,GAAA,UAAA,GAAA,WACA,MAAA,GAAA,KAAA,KAAA,EAAA,MAAA,KAAA,SAAA,eAKA,EAAA,UAAA,MAAA,WACA,MAAA,MAAA,UAUA,kBAAA,SAAA,OAAA,KACA,OAAA,gBAAA,WACA,MAAA,OAGA,KAAA,MC/3CA,SAAA,EAAA,GAGA,GAAA,kBAAA,SAAA,OAAA,IACA,OAAA,YAAA,aAAA,SAAA,WAAA,SAAA,EAAA,EAAA,GAGA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,SAIA,IAAA,mBAAA,SAAA,CACA,GAAA,GAAA,QAAA,aACA,GAAA,EAAA,QAAA,OAIA,GAAA,SAAA,EAAA,KAAA,EAAA,EAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA,IAGA,KAAA,SAAA,EAAA,EAAA,EAAA,GAOA,CAAA,GAAA,GAAA,EAAA,SAGA,KAEA,GADA,EAAA,KACA,EAAA,MACA,GAAA,OAGA,EAAA,QAAA,QAIA,EAAA,EAAA,EAIA,EAAA,WAAA,WAEA,MADA,GAAA,SAAA,EACA,MAMA,EAAA,aAAA,EAMA,EAAA,aAAA,CAeA,IAAA,GAAA,EAAA,QAIA,GAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,KAAA,GAAA,EAAA,MAAA,EAAA,MAAA,KACA,MAAA,UAAA,KAAA,WACA,IAAA,GAAA,KAAA,QAAA,KAAA,KAAA,QAAA,MAEA,OADA,GAAA,MAAA,SAAA,EAAA,QAAA,EAAA,IAAA,GAAA,OACA,MAKA,KAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,OAAA,GAAA,EAAA,MAAA,EAAA,MAAA,KACA,IAAA,GAAA,KACA,EAAA,EAAA,KAAA,WACA,EAAA,IAAA,EAAA,GACA,EAAA,MAAA,KAAA,YAGA,OADA,GAAA,UAAA,EACA,KAAA,GAAA,EAAA,EAAA,IAOA,IAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CACA,KAAA,KAAA,UAAA,EAAA,KAAA,MAAA,GAAA,EAAA,IAAA,MAAA,KACA,KAAA,IAAA,IAAA,EAEA,MADA,MAAA,QAAA,OACA,IAGA,KADA,EAAA,GAAA,GAAA,EAAA,KAAA,KAAA,SACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAEA,GADA,EAAA,EAAA,GACA,EAAA,KAAA,QAAA,GAAA,CAEA,GADA,KAAA,QAAA,GAAA,KACA,GAAA,EACA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,GAAA,IAAA,EAAA,UAAA,IAAA,EAAA,SAAA,WACA,GAAA,IAAA,EAAA,UACA,EAAA,KAAA,EAIA,GAAA,cAAA,MAAA,QAAA,GAIA,MAAA,OAOA,QAAA,SAAA,GACA,IAAA,KAAA,QAAA,MAAA,KACA,IAAA,GAAA,EAAA,KAAA,UAAA,EACA,KAAA,EAAA,KAAA,UAAA,EAAA,GAAA,MAAA,KACA,IAAA,GAAA,KAAA,QAAA,GACA,EAAA,KAAA,QAAA,GAGA,OAFA,IAAA,EAAA,EAAA,GACA,GAAA,EAAA,EAAA,WACA,MAKA,cAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,KAAA,YACA,KAAA,EAAA,MAAA,KACA,IAAA,IAAA,IAAA,CACA,IAAA,gBAAA,KAAA,EAAA,MACA,KAAA,MAAA,EAAA,WAAA,EACA,KAAA,GAAA,KAAA,GACA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,OACA,GAAA,EAAA,QAAA,EAAA,iBAAA,MAAA,aAAA,EAEA,OAAA,QAMA,EAAA,MAKA,EAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,OAAA,CAGA,IAAA,gBAAA,GAAA,CACA,IAAA,GAAA,KAAA,GACA,EAAA,GAAA,MAAA,GAAA,EAAA,EAAA,IAAA,OAAA,GAEA,QAAA,EAIA,GAAA,EAAA,KAAA,GAAA,CAEA,IAAA,GADA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,GAAA,MAAA,GAAA,EAAA,IAAA,OAAA,GAEA,QAAA,EAGA,OAAA,GAMA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,QAAA,EAAA,QACA,IAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,SAAA,KAAA,EAAA,IAAA,OACA,KAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,SAAA,KAAA,EAAA,IAAA,EAAA,OACA,KAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,SAAA,KAAA,EAAA,IAAA,EAAA,EAAA,OACA,KAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,SAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OACA,SAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,SAAA,MAAA,EAAA,IAAA,EAAA,UAIA,GAAA,SAAA,KAAA,aAAA,OAKA,GAAA,KAAA,EAAA,SAAA,EAAA,GACA,EAAA,GAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,KAAA,eAAA,KAAA,iBACA,EAAA,EAAA,YAAA,EAAA,UAAA,EAAA,SAAA,KAIA,OAHA,GAAA,GAAA,EACA,GAAA,gBAAA,KAAA,EAAA,MACA,EAAA,GAAA,EAAA,EAAA,MACA,QAKA,EAAA,KAAA,EAAA,GACA,EAAA,OAAA,EAAA,IAIA,EAAA,OAAA,EAAA,EAYA,IAAA,GAAA,EAAA,MAAA,SAAA,EAAA,GACA,GAAA,GAAA,KACA,KAAA,MACA,KAAA,IAAA,EAAA,SAAA,KACA,KAAA,cACA,EAAA,aAAA,KAAA,WAAA,EAAA,YACA,EAAA,QAAA,EAAA,KAAA,MAAA,EAAA,QACA,EAAA,EAAA,YAAA,EAAA,EAAA,OAAA,KAAA,aACA,KAAA,IAAA,EAAA,GACA,KAAA,WACA,KAAA,WAAA,MAAA,KAAA,WAIA,GAAA,OAAA,EAAA,UAAA,GAGA,QAAA,KAGA,gBAAA,KAIA,YAAA,KAIA,WAAA,aAGA,OAAA,WACA,MAAA,GAAA,MAAA,KAAA,aAKA,KAAA,WACA,MAAA,GAAA,KAAA,MAAA,KAAA,YAIA,IAAA,SAAA,GACA,MAAA,MAAA,WAAA,IAIA,OAAA,SAAA,GACA,MAAA,GAAA,OAAA,KAAA,IAAA,KAKA,IAAA,SAAA,GACA,MAAA,OAAA,KAAA,IAAA,IAMA,IAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CACA,IAAA,MAAA,EAAA,MAAA,KAaA,IAVA,gBAAA,IACA,EAAA,EACA,EAAA,IAEA,MAAA,GAAA,EAGA,IAAA,OAGA,KAAA,UAAA,EAAA,GAAA,OAAA,CAGA,GAAA,EAAA,MACA,EAAA,EAAA,OACA,KACA,EAAA,KAAA,UACA,KAAA,WAAA,EAEA,IACA,KAAA,oBAAA,EAAA,MAAA,KAAA,YACA,KAAA,YAEA,EAAA,KAAA,WAAA,EAAA,KAAA,oBAGA,KAAA,cAAA,KAAA,KAAA,GAAA,EAAA,KAAA,aAGA,KAAA,IAAA,GACA,EAAA,EAAA,GACA,EAAA,QAAA,EAAA,GAAA,IAAA,EAAA,KAAA,GACA,EAAA,QAAA,EAAA,GAAA,SAGA,MAAA,QAAA,GAFA,KAAA,QAAA,GAAA,EAIA,QAAA,GAAA,GAAA,EAAA,GAAA,CAIA,KAAA,EAAA,CACA,EAAA,SAAA,KAAA,SAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,KAAA,QAAA,UAAA,EAAA,GAAA,KAAA,EAAA,EAAA,IAAA,GAMA,GAAA,EAAA,MAAA,KACA,KAAA,EACA,KAAA,KAAA,UACA,EAAA,KAAA,SACA,KAAA,UAAA,EACA,KAAA,QAAA,SAAA,KAAA,EAKA,OAFA,MAAA,UAAA,EACA,KAAA,WAAA,EACA,MAKA,MAAA,SAAA,EAAA,GACA,MAAA,MAAA,IAAA,EAAA,OAAA,EAAA,UAAA,GAAA,OAAA,MAIA,MAAA,SAAA,GACA,GAAA,KACA,KAAA,GAAA,KAAA,MAAA,WAAA,EAAA,GAAA,MACA,OAAA,MAAA,IAAA,EAAA,EAAA,UAAA,GAAA,OAAA,MAKA,WAAA,SAAA,GACA,MAAA,OAAA,GAAA,EAAA,QAAA,KAAA,SACA,EAAA,IAAA,KAAA,QAAA,IASA,kBAAA,SAAA,GACA,IAAA,EAAA,MAAA,MAAA,aAAA,EAAA,MAAA,KAAA,UAAA,CACA,IAAA,GAAA,GAAA,EACA,EAAA,KAAA,UAAA,KAAA,oBAAA,KAAA,UACA,KAAA,GAAA,KAAA,GACA,EAAA,QAAA,EAAA,GAAA,EAAA,EAAA,OACA,IAAA,OAAA,GAAA,EAEA,OAAA,IAKA,SAAA,SAAA,GACA,MAAA,OAAA,GAAA,KAAA,oBACA,KAAA,oBAAA,GADA,MAMA,mBAAA,WACA,MAAA,GAAA,MAAA,KAAA,sBAMA,MAAA,SAAA,GACA,EAAA,EAAA,EAAA,MAAA,MACA,SAAA,EAAA,QAAA,EAAA,OAAA,EACA,IAAA,GAAA,KACA,EAAA,EAAA,OAOA,OANA,GAAA,QAAA,SAAA,GACA,MAAA,GAAA,IAAA,EAAA,MAAA,EAAA,GAAA,IACA,GAAA,EAAA,EAAA,EAAA,OACA,GAAA,QAAA,OAAA,EAAA,EAAA,KAFA,GAIA,EAAA,KAAA,GACA,KAAA,KAAA,OAAA,KAAA,IAMA,KAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,UAeA,IAZA,MAAA,GAAA,gBAAA,IACA,EAAA,EACA,EAAA,IAEA,MAAA,GAAA,EAGA,EAAA,EAAA,QAAA,UAAA,GAAA,GAKA,IAAA,EAAA,MACA,IAAA,KAAA,IAAA,EAAA,GAAA,OAAA,MAEA,KAAA,KAAA,UAAA,EAAA,GAAA,OAAA,CAIA,IAAA,EAAA,OACA,KAAA,WAAA,EAAA,UAAA,EAAA,IAKA,SAAA,EAAA,QAAA,EAAA,OAAA,EACA,IAAA,GAAA,KACA,EAAA,EAAA,OAqBA,OApBA,GAAA,QAAA,SAAA,GAEA,EAAA,WAAA,CACA,IAAA,GAAA,EAAA,MAAA,EAAA,EAEA,OADA,GAAA,OAAA,EAAA,EAAA,OAAA,MAAA,IACA,EAAA,SAAA,KAAA,EAAA,IAAA,EAAA,IACA,GAEA,GAAA,EAAA,EAAA,EAAA,OACA,GAAA,QAAA,OAAA,EAAA,EAAA,KAEA,EAAA,KAAA,GAEA,EAAA,KAAA,QAAA,SAAA,EAAA,MAAA,QAAA,SACA,UAAA,IAAA,EAAA,MAAA,GACA,EAAA,KAAA,KAAA,EAAA,KAAA,GAGA,GAAA,EAAA,OAAA,KAAA,WAAA,GAEA,GAMA,QAAA,SAAA,GACA,EAAA,EAAA,EAAA,MAAA,KACA,IAAA,GAAA,KACA,EAAA,EAAA,QAEA,EAAA,WACA,EAAA,QAAA,UAAA,EAAA,EAAA,WAAA,GASA,IANA,EAAA,QAAA,SAAA,IACA,EAAA,MAAA,EAAA,UAAA,IACA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,SAAA,EAAA,QAAA,OAAA,EAAA,EAAA,IAGA,KAAA,QAEA,MADA,GAAA,WACA,CAEA,GAAA,KAAA,EAEA,IAAA,GAAA,KAAA,KAAA,SAAA,KAAA,EAEA,OADA,GAAA,MAAA,IACA,GAMA,IAAA,WACA,GAAA,GACA,EAAA,OAAA,KAAA,YACA,EAAA,OAAA,KAAA,WAAA,QACA,GACA,OAAA,MAAA,QAAA,EACA,EAAA,QAAA,WAAA,OAAA,mBAAA,KAAA,KAKA,MAAA,SAAA,GACA,MAAA,IAIA,MAAA,WACA,MAAA,IAAA,MAAA,YAAA,KAAA,aAIA,MAAA,WACA,OAAA,KAAA,IAAA,KAAA,cAIA,QAAA,SAAA,GACA,MAAA,MAAA,aAAA,EAAA,OAAA,OAAA,UAAA,MAKA,UAAA,SAAA,EAAA,GACA,IAAA,EAAA,WAAA,KAAA,SAAA,OAAA,CACA,GAAA,EAAA,UAAA,KAAA,WAAA,EACA,IAAA,GAAA,KAAA,gBAAA,KAAA,SAAA,EAAA,IAAA,IACA,OAAA,IACA,KAAA,QAAA,UAAA,KAAA,EAAA,EAAA,OAAA,GAAA,gBAAA,MACA,IAFA,IAQA,IAAA,IAAA,OAAA,SAAA,QAAA,SAAA,OAAA,OAGA,GAAA,KAAA,EAAA,SAAA,GACA,EAAA,UAAA,GAAA,WACA,GAAA,GAAA,EAAA,KAAA,UAEA,OADA,GAAA,QAAA,KAAA,YACA,EAAA,GAAA,MAAA,EAAA,KAiBA,IAAA,GAAA,EAAA,WAAA,SAAA,EAAA,GACA,IAAA,MACA,EAAA,QAAA,KAAA,MAAA,EAAA,OACA,SAAA,EAAA,aAAA,KAAA,WAAA,EAAA,YACA,KAAA,SACA,KAAA,WAAA,MAAA,KAAA,WACA,GAAA,KAAA,MAAA,EAAA,EAAA,QAAA,QAAA,GAAA,KAIA,GAAA,KAAA,EAAA,QAAA,EAAA,OAAA,GACA,GAAA,KAAA,EAAA,QAAA,EAGA,GAAA,OAAA,EAAA,UAAA,GAIA,MAAA,EAIA,WAAA,aAIA,OAAA,SAAA,GACA,MAAA,MAAA,IAAA,SAAA,GAAA,MAAA,GAAA,OAAA,MAIA,KAAA,WACA,MAAA,GAAA,KAAA,MAAA,KAAA,YAIA,IAAA,SAAA,EAAA,GACA,MAAA,MAAA,IAAA,EAAA,EAAA,QAAA,OAAA,GAAA,EAAA,KAIA,OAAA,SAAA,EAAA,GACA,GAAA,IAAA,EAAA,QAAA,EACA,GAAA,GAAA,GAAA,EAAA,MAAA,GACA,IAAA,KACA,IAAA,GAAA,EAAA,EAAA,CACA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,KAAA,IAAA,EAAA,IACA,UACA,MAAA,MAAA,EAAA,UACA,MAAA,MAAA,EAAA,KACA,EAAA,KAAA,QAAA,GACA,KAAA,OAAA,OAAA,EAAA,GACA,KAAA,SACA,EAAA,SACA,EAAA,MAAA,EACA,EAAA,QAAA,SAAA,EAAA,KAAA,IAEA,KAAA,iBAAA,EAAA,GAEA,OAAA,GAAA,EAAA,GAAA,GAOA,IAAA,SAAA,EAAA,GACA,EAAA,EAAA,YAAA,EAAA,GACA,EAAA,QAAA,EAAA,KAAA,MAAA,EAAA,GACA,IAAA,IAAA,EAAA,QAAA,EACA,GAAA,EAAA,GAAA,MAAA,EAAA,MAAA,EACA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,GACA,EAAA,KAAA,MACA,EAAA,KAAA,YAAA,MAAA,GAAA,EAAA,QAAA,EACA,EAAA,EAAA,SAAA,KAAA,YAAA,KAAA,WAAA,KACA,KAAA,KAAA,KACA,EAAA,EAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,OACA,GAAA,GAAA,GAAA,MAAA,CAIA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAUA,GATA,EAAA,EAAA,OAEA,EADA,YAAA,GACA,EAAA,EAEA,EAAA,EAAA,UAAA,aAAA,MAKA,EAAA,KAAA,IAAA,GACA,IAAA,EAAA,EAAA,MAAA,GACA,IACA,EAAA,IAAA,EAAA,EAAA,WAAA,EACA,EAAA,QAAA,EAAA,EAAA,MAAA,EAAA,IACA,EAAA,IAAA,EAAA,GACA,IAAA,GAAA,EAAA,WAAA,KAAA,GAAA,IAEA,EAAA,GAAA,MAGA,IAAA,EAAA,CAEA,GADA,EAAA,EAAA,GAAA,KAAA,cAAA,EAAA,IACA,EAAA,QACA,GAAA,KAAA,GACA,KAAA,cAAA,EAAA,GAIA,EAAA,GAAA,GACA,IAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,KAAA,GACA,EAAA,EAAA,KAAA,EAIA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,EAAA,KAAA,OAAA,EAAA,IAAA,EACA,GAAA,EAAA,KAAA,OAAA,IAAA,MAAA,EAAA,KAAA,EAEA,GAAA,QAAA,KAAA,OAAA,EAAA,GAIA,GAAA,EAAA,QAAA,GAAA,EAAA,OAGA,GAFA,IAAA,GAAA,GACA,KAAA,QAAA,EAAA,OACA,MAAA,EACA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,KAAA,OAAA,OAAA,EAAA,EAAA,EAAA,EAAA,QAEA,CACA,IAAA,KAAA,OAAA,OAAA,EACA,IAAA,GAAA,GAAA,CACA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,KAAA,OAAA,KAAA,EAAA,IASA,GAHA,GAAA,KAAA,MAAA,QAAA,KAGA,EAAA,OAAA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KACA,EAAA,EAAA,IAAA,QAAA,MAAA,EAAA,KAAA,IAEA,GAAA,GAAA,EAAA,SAAA,KAAA,QAAA,OAAA,KAAA,GAIA,MAAA,GAAA,EAAA,GAAA,GAOA,MAAA,SAAA,EAAA,GACA,IAAA,KACA,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,OAAA,OAAA,EAAA,EAAA,IACA,KAAA,iBAAA,KAAA,OAAA,GAAA,EAMA,OAJA,GAAA,eAAA,KAAA,OACA,KAAA,SACA,EAAA,KAAA,IAAA,EAAA,EAAA,QAAA,QAAA,GAAA,IACA,EAAA,QAAA,KAAA,QAAA,QAAA,KAAA,GACA,GAIA,KAAA,SAAA,EAAA,GACA,MAAA,MAAA,IAAA,EAAA,EAAA,QAAA,GAAA,KAAA,QAAA,KAIA,IAAA,SAAA,GACA,GAAA,GAAA,KAAA,GAAA,KAAA,OAAA,EAEA,OADA,MAAA,OAAA,EAAA,GACA,GAIA,QAAA,SAAA,EAAA,GACA,MAAA,MAAA,IAAA,EAAA,EAAA,QAAA,GAAA,GAAA,KAIA,MAAA,SAAA,GACA,GAAA,GAAA,KAAA,GAAA,EAEA,OADA,MAAA,OAAA,EAAA,GACA,GAIA,MAAA,WACA,MAAA,GAAA,MAAA,KAAA,OAAA,YAIA,IAAA,SAAA,GACA,MAAA,OAAA,EAAA,OACA,KAAA,MAAA,IAAA,KAAA,MAAA,EAAA,KAAA,KAAA,MAAA,EAAA,MAIA,GAAA,SAAA,GACA,MAAA,MAAA,OAAA,IAKA,MAAA,SAAA,EAAA,GACA,MAAA,GAAA,QAAA,GAAA,EAAA,UACA,KAAA,EAAA,OAAA,UAAA,SAAA,GACA,IAAA,GAAA,KAAA,GACA,GAAA,EAAA,KAAA,EAAA,IAAA,GAAA,OAAA,CAEA,QAAA,KAMA,UAAA,SAAA,GACA,MAAA,MAAA,MAAA,GAAA,IAMA,KAAA,SAAA,GACA,IAAA,KAAA,WAAA,KAAA,IAAA,OAAA,yCAWA,OAVA,KAAA,MAGA,EAAA,SAAA,KAAA,aAAA,IAAA,KAAA,WAAA,OACA,KAAA,OAAA,KAAA,OAAA,KAAA,WAAA,MAEA,KAAA,OAAA,KAAA,EAAA,KAAA,KAAA,WAAA,OAGA,EAAA,QAAA,KAAA,QAAA,OAAA,KAAA,GACA,MAIA,MAAA,SAAA,GACA,MAAA,GAAA,OAAA,KAAA,OAAA,MAAA,IAMA,MAAA,SAAA,GACA,EAAA,EAAA,EAAA,MAAA,MACA,SAAA,EAAA,QAAA,EAAA,OAAA,EACA,IAAA,GAAA,EAAA,QACA,EAAA,IAQA,OAPA,GAAA,QAAA,SAAA,GACA,GAAA,GAAA,EAAA,MAAA,QAAA,KACA,GAAA,GAAA,EAAA,GACA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,QAAA,OAAA,EAAA,EAAA,IAEA,EAAA,KAAA,GACA,KAAA,KAAA,OAAA,KAAA,IAMA,OAAA,SAAA,EAAA,GAEA,GADA,EAAA,EAAA,EAAA,MAAA,QACA,EAAA,KAAA,cAAA,EAAA,IAAA,OAAA,CACA,GAAA,MAAA,KAAA,IAAA,EAAA,EACA,IAAA,GAAA,KACA,EAAA,EAAA,OAMA,OALA,GAAA,QAAA,SAAA,EAAA,GACA,EAAA,MAAA,EAAA,IAAA,EAAA,GACA,GAAA,EAAA,EAAA,EAAA,IAEA,EAAA,KAAA,KAAA,GACA,GAKA,MAAA,SAAA,GACA,MAAA,IAIA,MAAA,WACA,MAAA,IAAA,MAAA,YAAA,KAAA,SAKA,OAAA,WACA,KAAA,OAAA,EACA,KAAA,UACA,KAAA,UAKA,cAAA,SAAA,EAAA,GACA,GAAA,YAAA,GAAA,MAAA,EACA,GAAA,EAAA,EAAA,MAAA,MACA,EAAA,WAAA,IACA,IAAA,GAAA,GAAA,MAAA,MAAA,EAAA,EACA,OAAA,GAAA,iBACA,KAAA,QAAA,UAAA,KAAA,EAAA,gBAAA,IACA,GAFA,GAMA,cAAA,SAAA,GACA,KAAA,MAAA,EAAA,KAAA,EACA,MAAA,EAAA,KAAA,KAAA,MAAA,EAAA,IAAA,GACA,EAAA,aAAA,EAAA,WAAA,MACA,EAAA,GAAA,MAAA,KAAA,cAAA,OAIA,iBAAA,SAAA,GACA,OAAA,EAAA,kBAAA,GAAA,WACA,EAAA,IAAA,MAAA,KAAA,cAAA,OAOA,cAAA,SAAA,EAAA,EAAA,EAAA,IACA,QAAA,GAAA,WAAA,GAAA,IAAA,QACA,YAAA,GAAA,KAAA,OAAA,EAAA,GACA,GAAA,IAAA,UAAA,EAAA,oBACA,MAAA,MAAA,EAAA,SAAA,EAAA,cACA,MAAA,EAAA,KAAA,KAAA,MAAA,EAAA,IAAA,IAEA,KAAA,QAAA,MAAA,KAAA,cAQA,IAAA,IAAA,UAAA,OAAA,MAAA,UAAA,SAAA,QACA,SAAA,cAAA,QAAA,OAAA,SAAA,SAAA,SACA,SAAA,QAAA,MAAA,OAAA,MAAA,UAAA,WAAA,SACA,MAAA,MAAA,UAAA,OAAA,QAAA,OAAA,OAAA,UAAA,OACA,OAAA,OAAA,OAAA,UAAA,aAAA,UAAA,UACA,cAAA,UAAA,QAAA,SAGA,GAAA,KAAA,EAAA,SAAA,GACA,EAAA,UAAA,GAAA,WACA,GAAA,GAAA,EAAA,KAAA,UAEA,OADA,GAAA,QAAA,KAAA,QACA,EAAA,GAAA,MAAA,EAAA,KAKA,IAAA,IAAA,UAAA,UAAA,SAAA,UAGA,GAAA,KAAA,EAAA,SAAA,GACA,EAAA,UAAA,GAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,WAAA,GAAA,EAAA,SAAA,GACA,MAAA,GAAA,IAAA,GAEA,OAAA,GAAA,GAAA,KAAA,OAAA,EAAA,KAiBA,IAAA,GAAA,EAAA,KAAA,SAAA,GACA,KAAA,IAAA,EAAA,SAAA,QACA,IAAA,MACA,EAAA,OAAA,KAAA,EAAA,KAAA,EAAA,IACA,KAAA,iBACA,KAAA,WAAA,MAAA,KAAA,WACA,KAAA,kBAIA,EAAA,iBAGA,GAAA,QAAA,aAAA,KAAA,KAAA,aAAA,YAAA,UAAA,SAGA,GAAA,OAAA,EAAA,UAAA,GAGA,QAAA,MAIA,EAAA,SAAA,GACA,MAAA,MAAA,IAAA,KAAA,IAKA,WAAA,aAKA,OAAA,WACA,MAAA,OAKA,OAAA,WAGA,MAFA,MAAA,IAAA,SACA,KAAA,gBACA,MAKA,WAAA,SAAA,EAAA,GAKA,MAJA,MAAA,KAAA,KAAA,mBACA,KAAA,IAAA,YAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,GAAA,KAAA,IAAA,GACA,KAAA,GAAA,KAAA,iBACA,MAkBA,eAAA,SAAA,GACA,IAAA,KAAA,EAAA,EAAA,OAAA,KAAA,WAAA,MAAA,KACA,MAAA,kBACA,KAAA,GAAA,KAAA,GAAA,CACA,GAAA,GAAA,EAAA,EAEA,IADA,EAAA,WAAA,KAAA,EAAA,KAAA,EAAA,KACA,EAAA,CAEA,GAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,GAAA,EAAA,KAAA,EAAA,MACA,GAAA,kBAAA,KAAA,IACA,KAAA,EACA,KAAA,IAAA,GAAA,EAAA,GAEA,KAAA,IAAA,GAAA,EAAA,EAAA,IAGA,MAAA,OAMA,iBAAA,WAEA,MADA,MAAA,IAAA,IAAA,kBAAA,KAAA,KACA,MAOA,eAAA,WACA,GAAA,KAAA,GAOA,KAAA,WAAA,EAAA,OAAA,KAAA,OAAA,OAPA,CACA,GAAA,GAAA,EAAA,UAAA,EAAA,OAAA,KAAA,cACA,MAAA,KAAA,EAAA,GAAA,EAAA,OAAA,KAAA,OACA,KAAA,YAAA,EAAA,SAAA,EAAA,OAAA,KAAA,aACA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,OAAA,KAAA,WAAA,KAAA,KAAA,EACA,MAAA,WAAA,GAAA,OA0BA,EAAA,KAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAGA,GAAA,SAAA,IAAA,OACA,YAAA,EAAA,YACA,YAAA,EAAA,aAIA,IAAA,IAAA,KAAA,EAAA,SAAA,OAqBA,IAlBA,EAAA,MACA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA,KAIA,MAAA,EAAA,OAAA,GAAA,WAAA,GAAA,WAAA,GAAA,UAAA,IACA,EAAA,YAAA,mBACA,EAAA,KAAA,KAAA,UAAA,EAAA,OAAA,EAAA,OAAA,KAIA,EAAA,cACA,EAAA,YAAA,oCACA,EAAA,KAAA,EAAA,MAAA,MAAA,EAAA,UAKA,EAAA,cAAA,QAAA,GAAA,WAAA,GAAA,UAAA,GAAA,CACA,EAAA,KAAA,OACA,EAAA,cAAA,EAAA,KAAA,QAAA,EACA,IAAA,GAAA,EAAA,UACA,GAAA,WAAA,SAAA,GAEA,MADA,GAAA,iBAAA,yBAAA,GACA,EAAA,EAAA,MAAA,KAAA,WAAA,QAKA,QAAA,EAAA,MAAA,EAAA,cACA,EAAA,aAAA,GAMA,UAAA,EAAA,MAAA,IACA,EAAA,IAAA,WACA,MAAA,IAAA,eAAA,sBAKA,IAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,OAAA,EAAA,GAEA,OADA,GAAA,QAAA,UAAA,EAAA,EAAA,GACA,EAGA,IAAA,KACA,mBAAA,UAAA,OAAA,eACA,OAAA,iBAAA,GAAA,iBAAA,eAGA,GACA,OAAA,OACA,OAAA,MACA,MAAA,QACA,SAAA,SACA,KAAA,MAKA,GAAA,KAAA,WACA,MAAA,GAAA,EAAA,KAAA,MAAA,EAAA,EAAA,WAQA,IAAA,GAAA,EAAA,OAAA,SAAA,GACA,IAAA,MACA,EAAA,SAAA,KAAA,OAAA,EAAA,QACA,KAAA,cACA,KAAA,WAAA,MAAA,KAAA,YAKA,EAAA,aACA,EAAA,eACA,EAAA,SACA,EAAA,0BAGA,GAAA,OAAA,EAAA,UAAA,GAIA,WAAA,aAQA,MAAA,SAAA,EAAA,EAAA,GACA,EAAA,SAAA,KAAA,EAAA,KAAA,eAAA,IACA,EAAA,WAAA,KACA,EAAA,EACA,EAAA,IAEA,IAAA,EAAA,KAAA,GACA,IAAA,GAAA,IAQA,OAPA,GAAA,QAAA,MAAA,EAAA,SAAA,GACA,GAAA,GAAA,EAAA,mBAAA,EAAA,EACA,GAAA,QAAA,EAAA,GACA,EAAA,QAAA,MAAA,GAAA,SAAA,GAAA,OAAA,IACA,EAAA,QAAA,QAAA,EAAA,GACA,EAAA,QAAA,QAAA,QAAA,EAAA,EAAA,KAEA,MAKA,QAAA,SAAA,EAAA,GACA,GAAA,EAAA,MAAA,KAAA,IAIA,SAAA,SAAA,EAAA,GAEA,MADA,GAAA,QAAA,SAAA,EAAA,GACA,MAMA,YAAA,WACA,GAAA,KAAA,OAAA,CACA,KAAA,OAAA,EAAA,OAAA,KAAA,SAEA,KADA,GAAA,GAAA,EAAA,EAAA,KAAA,KAAA,QACA,OAAA,EAAA,EAAA,QACA,KAAA,MAAA,EAAA,KAAA,OAAA,MAMA,eAAA,SAAA,GAOA,MANA,GAAA,EAAA,QAAA,EAAA,QACA,QAAA,EAAA,WACA,QAAA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,EAAA,aAEA,QAAA,EAAA,YACA,GAAA,QAAA,IAAA,EAAA,yBAMA,mBAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,GAAA,MAAA,EACA,OAAA,GAAA,IAAA,EAAA,SAAA,EAAA,GAEA,MAAA,KAAA,EAAA,OAAA,EAAA,GAAA,KACA,EAAA,mBAAA,GAAA,SAcA,IAAA,GAAA,EAAA,QAAA,WACA,KAAA,YACA,EAAA,QAAA,KAAA,YAGA,mBAAA,UACA,KAAA,SAAA,OAAA,SACA,KAAA,QAAA,OAAA,UAKA,EAAA,eAGA,EAAA,aAGA,EAAA,cAGA,EAAA,MAGA,EAAA,MAGA,GAAA,SAAA,EAGA,EAAA,OAAA,EAAA,UAAA,GAIA,SAAA,GAGA,OAAA,WACA,MAAA,MAAA,SAAA,SAAA,QAAA,SAAA,SAAA,KAAA,MAKA,QAAA,SAAA,GACA,GAAA,IAAA,GAAA,MAAA,SAAA,KAAA,MAAA,SACA,OAAA,GAAA,EAAA,GAAA,IAKA,YAAA,SAAA,EAAA,GACA,GAAA,MAAA,EACA,GAAA,KAAA,gBAAA,KAAA,kBAAA,EAAA,CACA,EAAA,UAAA,KAAA,SAAA,SAAA,KAAA,SAAA,OACA,IAAA,GAAA,KAAA,KAAA,QAAA,EAAA,GACA,GAAA,QAAA,KAAA,EAAA,EAAA,MAAA,EAAA,aAEA,GAAA,KAAA,SAGA,OAAA,GAAA,QAAA,EAAA,KAKA,MAAA,SAAA,GACA,GAAA,EAAA,QAAA,KAAA,IAAA,OAAA,4CACA,GAAA,SAAA,EAIA,KAAA,QAAA,EAAA,QAAA,KAAA,KAAA,KAAA,QAAA,GACA,KAAA,KAAA,KAAA,QAAA,KACA,KAAA,iBAAA,KAAA,QAAA,cAAA,EACA,KAAA,kBAAA,KAAA,QAAA,UACA,KAAA,iBAAA,KAAA,QAAA,WAAA,KAAA,SAAA,KAAA,QAAA,UACA,IAAA,GAAA,KAAA,cACA,EAAA,SAAA,aACA,EAAA,EAAA,KAAA,UAAA,UAAA,kBAAA,GAAA,GAAA,EAKA,IAFA,KAAA,MAAA,IAAA,KAAA,KAAA,KAAA,QAAA,EAAA,KAEA,GAAA,KAAA,iBAAA,CACA,GAAA,GAAA,EAAA,EAAA,4CACA;KAAA,OAAA,EAAA,OAAA,SAAA,QAAA,GAAA,cACA,KAAA,SAAA,GAKA,KAAA,cACA,EAAA,EAAA,QAAA,GAAA,WAAA,KAAA,UACA,KAAA,kBAAA,gBAAA,UAAA,EACA,EAAA,EAAA,QAAA,GAAA,aAAA,KAAA,UACA,KAAA,mBACA,KAAA,kBAAA,YAAA,KAAA,SAAA,KAAA,WAKA,KAAA,SAAA,CACA,IAAA,GAAA,KAAA,QAIA,IAAA,KAAA,kBAAA,KAAA,gBAAA,CAIA,IAAA,KAAA,gBAAA,KAAA,SAIA,MAHA,MAAA,SAAA,KAAA,YAAA,MAAA,GACA,KAAA,SAAA,QAAA,KAAA,KAAA,IAAA,KAAA,WAEA,CAIA,MAAA,eAAA,KAAA,UAAA,EAAA,OACA,KAAA,SAAA,KAAA,UAAA,QAAA,EAAA,IACA,KAAA,QAAA,gBAAA,SAAA,MAAA,KAAA,KAAA,KAAA,WAKA,MAAA,MAAA,QAAA,OAAA,OAAA,KAAA,WAKA,KAAA,WACA,EAAA,EAAA,QAAA,IAAA,WAAA,KAAA,UAAA,IAAA,aAAA,KAAA,UACA,KAAA,mBAAA,cAAA,KAAA,mBACA,EAAA,SAAA,GAKA,MAAA,SAAA,EAAA,GACA,KAAA,SAAA,SAAA,MAAA,EAAA,SAAA,KAKA,SAAA,WACA,GAAA,GAAA,KAAA,aAIA,OAHA,KAAA,KAAA,UAAA,KAAA,SACA,EAAA,KAAA,YAAA,KAAA,QAAA,KAAA,UAEA,IAAA,KAAA,UAAA,GACA,KAAA,QAAA,KAAA,SAAA,OACA,MAAA,YAMA,QAAA,SAAA,GAEA,MADA,GAAA,KAAA,SAAA,KAAA,YAAA,GACA,EAAA,IAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,MAAA,KAAA,IACA,EAAA,SAAA,IACA,GAFA,UAcA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,QAAA,OAAA,CACA,IAAA,KAAA,IAAA,GAAA,UAAA,GAEA,IAAA,GAAA,KAAA,MAAA,EAAA,KAAA,YAAA,GAAA,IAKA,IAFA,EAAA,EAAA,QAAA,EAAA,IAEA,KAAA,WAAA,EAAA,CAOA,GANA,KAAA,SAAA,EAGA,KAAA,GAAA,MAAA,IAAA,EAAA,EAAA,MAAA,EAAA,KAGA,KAAA,cACA,KAAA,QAAA,EAAA,QAAA,eAAA,gBAAA,SAAA,MAAA,OAIA,CAAA,IAAA,KAAA,iBAaA,MAAA,MAAA,SAAA,OAAA,EAZA,MAAA,YAAA,KAAA,SAAA,EAAA,EAAA,SACA,KAAA,QAAA,IAAA,KAAA,YAAA,KAAA,QAAA,KAAA,WAIA,EAAA,SAAA,KAAA,OAAA,SAAA,OAAA,QACA,KAAA,YAAA,KAAA,OAAA,SAAA,EAAA,EAAA,UAQA,MAAA,GAAA,QAAA,KAAA,QAAA,GAAA,SAKA,YAAA,SAAA,EAAA,EAAA,GACA,GAAA,EAAA,CACA,GAAA,GAAA,EAAA,KAAA,QAAA,qBAAA,GACA,GAAA,QAAA,EAAA,IAAA,OAGA,GAAA,KAAA,IAAA,KAOA,EAAA,QAAA,GAAA,EAQA,IAAA,GAAA,SAAA,EAAA,GACA,GACA,GADA,EAAA,IAOA,GADA,GAAA,EAAA,IAAA,EAAA,eACA,EAAA,YAEA,WAAA,MAAA,GAAA,MAAA,KAAA,YAIA,EAAA,OAAA,EAAA,EAAA,EAIA,IAAA,GAAA,WAAA,KAAA,YAAA,EAYA,OAXA,GAAA,UAAA,EAAA,UACA,EAAA,UAAA,GAAA,GAIA,GAAA,EAAA,OAAA,EAAA,UAAA,GAIA,EAAA,UAAA,EAAA,UAEA,EAIA,GAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,CAGA,IAAA,GAAA,WACA,KAAA,IAAA,OAAA,mDAIA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KACA,GAAA,MAAA,SAAA,GACA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,QAAA,QAAA,EAAA,EAAA,IAIA,OAAA,KAIA,OCxkDA,UAAA,cACA,SAAA,GACA,GAAA,GAAA,SAAA,EAAA,GACA,KAAA,OAAA,EAAA,KAAA,GAEA,KAAA,YAAA,OACA,KAAA,aAwBA,OArBA,GAAA,UAAA,OAAA,WACA,KAAA,YAAA,UAAA,GAAA,KAAA,MAEA,IACA,GADA,EAAA,GAAA,MAAA,YAAA,KAAA,UAGA,GAAA,GAAA,IAAA,cACA,EAAA,WAAA,KAAA,QACA,EAAA,EAAA,SAEA,KAAA,QAAA,EAAA,UAIA,EAAA,UAAA,KAAA,SAAA,EAAA,GACA,KAAA,YAAA,EACA,KAAA,UAAA,EAEA,KAAA,UAGA,IAIA,OClCA,UAAA,WAAA,aAAA,UACA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,WACA,KAAA,YACA,KAAA,YACA,KAAA,IAAA,GACA,KAAA,UAAA,GACA,KAAA,aAAA,OAsHA,OAnaAAA,GAAA,GACA,KAAA,QAAA,KAAA,SAEA,EAAA,KAAA,UAAA,KAAA,SAAA,EAAA,GACA,EAAA,QAAA,GAAA,KAAA,EAAA,OAAA,EAAA,QAGA,MAGA,EAAA,UAAA,QAAA,SAAA,GACA,GAAA,KAAA,QAGA,CACA,GAAA,GAAA,EAAA,MAAA,SACA,EAAA,KACA,EAAA,EACA,EAAA,aAmBA,OAjBA,GAAA,GAAA,KAAA,SAAA,GACA,GAAA,EAAA,GAAA,IAAA,WAAA,CACA,IAAA,EAAA,EAAA,SAAA,IAAA,GAIA,KAAA,IAAA,OAAA,IAAA,EAAA,6BAAA,EAAA,KAHA,GAAA,EAAA,QAAA,OAMA,IAAA,EAAA,GAAA,SAAA,EACA,KAAA,IAAA,OAAA,IAAA,EAAA,8BAGA,KACA,EAAA,IAGA,EAzBA,KAAA,IAAA,OAAA,6DA6BA,EAAA,UAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,IAEA,OAAA,GAAA,KAAA,QACA,GAAA,EACA,SAAA,EAAA,SAAA,GAEA,OAAA,WAIA,MAHA,MAAA,IAAA,KAAA,KAAA,SAAA,IACA,EAAA,cAAA,EAAA,KAAA,KAEA,MAGA,WAAA,WACA,KAAA,aAKA,EAAA,UAAA,cAAA,SAAA,EAAA,GACA,GAAA,GAAA,IAEA,GAAA,GAAA,KAAA,SAAA,EAAA,GACA,EAAA,SAAA,GAAA,GAAA,GAAA,EAAA,MAIA,IAIA,OCjIA,WAAA,UACA,SAAA,GACA,MAAA","sourcesContent":["//     Underscore.js 1.7.0\n//     http://underscorejs.org\n//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    concat           = ArrayProto.concat,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.7.0';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var createCallback = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  _.iteratee = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return createCallback(value, context, argCount);\n    if (_.isObject(value)) return _.matches(value);\n    return _.property(value);\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    if (obj == null) return obj;\n    iteratee = createCallback(iteratee, context);\n    var i, length = obj.length;\n    if (length === +length) {\n      for (i = 0; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    if (obj == null) return [];\n    iteratee = _.iteratee(iteratee, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length),\n        currentKey;\n    for (var index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  var reduceError = 'Reduce of empty array with no initial value';\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {\n    if (obj == null) obj = [];\n    iteratee = createCallback(iteratee, context, 4);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index = 0, currentKey;\n    if (arguments.length < 3) {\n      if (!length) throw new TypeError(reduceError);\n      memo = obj[keys ? keys[index++] : index++];\n    }\n    for (; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {\n    if (obj == null) obj = [];\n    iteratee = createCallback(iteratee, context, 4);\n    var keys = obj.length !== + obj.length && _.keys(obj),\n        index = (keys || obj).length,\n        currentKey;\n    if (arguments.length < 3) {\n      if (!index) throw new TypeError(reduceError);\n      memo = obj[keys ? keys[--index] : --index];\n    }\n    while (index--) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var result;\n    predicate = _.iteratee(predicate, context);\n    _.some(obj, function(value, index, list) {\n      if (predicate(value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    if (obj == null) return results;\n    predicate = _.iteratee(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(_.iteratee(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    if (obj == null) return true;\n    predicate = _.iteratee(predicate, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index, currentKey;\n    for (index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    if (obj == null) return false;\n    predicate = _.iteratee(predicate, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index, currentKey;\n    for (index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `include`.\n  _.contains = _.include = function(obj, target) {\n    if (obj == null) return false;\n    if (obj.length !== +obj.length) obj = _.values(obj);\n    return _.indexOf(obj, target) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matches(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matches(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = _.iteratee(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = _.iteratee(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = obj && obj.length === +obj.length ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = _.iteratee(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = _.iteratee(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = _.iteratee(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = low + high >>> 1;\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return obj.length === +obj.length ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = _.iteratee(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    if (n < 0) return [];\n    return slice.call(array, 0, n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return slice.call(array, Math.max(array.length - n, 0));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    if (shallow && _.every(input, _.isArray)) {\n      return concat.apply(output, input);\n    }\n    for (var i = 0, length = input.length; i < length; i++) {\n      var value = input[i];\n      if (!_.isArray(value) && !_.isArguments(value)) {\n        if (!strict) output.push(value);\n      } else if (shallow) {\n        push.apply(output, value);\n      } else {\n        flatten(value, shallow, strict, output);\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = _.iteratee(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i];\n      if (isSorted) {\n        if (!i || seen !== value) result.push(value);\n        seen = value;\n      } else if (iteratee) {\n        var computed = iteratee(value, i, array);\n        if (_.indexOf(seen, computed) < 0) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (_.indexOf(result, value) < 0) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true, []));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    if (array == null) return [];\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = array.length; i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(slice.call(arguments, 1), true, true, []);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function(array) {\n    if (array == null) return [];\n    var length = _.max(arguments, 'length').length;\n    var results = Array(length);\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(arguments, i);\n    }\n    return results;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i = 0, length = array.length;\n    if (isSorted) {\n      if (typeof isSorted == 'number') {\n        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n      } else {\n        i = _.sortedIndex(array, item);\n        return array[i] === item ? i : -1;\n      }\n    }\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  _.lastIndexOf = function(array, item, from) {\n    if (array == null) return -1;\n    var idx = array.length;\n    if (typeof from == 'number') {\n      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);\n    }\n    while (--idx >= 0) if (array[idx] === item) return idx;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var Ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    var args, bound;\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    args = slice.call(arguments, 2);\n    bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      Ctor.prototype = func.prototype;\n      var self = new Ctor;\n      Ctor.prototype = null;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (_.isObject(result)) return result;\n      return self;\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    return function() {\n      var position = 0;\n      var args = boundArgs.slice();\n      for (var i = 0, length = args.length; i < length; i++) {\n        if (args[i] === _) args[i] = arguments[position++];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return func.apply(this, args);\n    };\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = hasher ? hasher.apply(this, arguments) : key;\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last > 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed before being called N times.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      } else {\n        func = null;\n      }\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    var source, prop;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n      source = arguments[i];\n      for (prop in source) {\n        if (hasOwnProperty.call(source, prop)) {\n            obj[prop] = source[prop];\n        }\n      }\n    }\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj, iteratee, context) {\n    var result = {}, key;\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      iteratee = createCallback(iteratee, context);\n      for (key in obj) {\n        var value = obj[key];\n        if (iteratee(value, key, obj)) result[key] = value;\n      }\n    } else {\n      var keys = concat.apply([], slice.call(arguments, 1));\n      obj = new Object(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        key = keys[i];\n        if (key in obj) result[key] = obj[key];\n      }\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n      var source = arguments[i];\n      for (var prop in source) {\n        if (obj[prop] === void 0) obj[prop] = source[prop];\n      }\n    }\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (\n      aCtor !== bCtor &&\n      // Handle Object.create(x) cases\n      'constructor' in a && 'constructor' in b &&\n      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n        _.isFunction(bCtor) && bCtor instanceof bCtor)\n    ) {\n      return false;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size, result;\n    // Recursively compare objects and arrays.\n    if (className === '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size === b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      size = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      result = _.keys(b).length === size;\n      if (result) {\n        while (size--) {\n          // Deep compare each member\n          key = keys[size];\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, [], []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.\n  if (typeof /./ !== 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = function(key) {\n    return function(obj) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.\n  _.matches = function(attrs) {\n    var pairs = _.pairs(attrs), length = pairs.length;\n    return function(obj) {\n      if (obj == null) return !length;\n      obj = new Object(obj);\n      for (var i = 0; i < length; i++) {\n        var pair = pairs[i], key = pair[0];\n        if (pair[1] !== obj[key] || !(key in obj)) return false;\n      }\n      return true;\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = createCallback(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return void 0;\n    var value = object[property];\n    return _.isFunction(value) ? object[property]() : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj) {\n    return this._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result.call(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result.call(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n\n","//     Backbone.js 1.1.2\n\n//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(root, factory) {\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (typeof define === 'function' && define.amd) {\n    define('backbone',['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore');\n    factory(root, exports, _);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n}(this, function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create local references to array methods we'll want to use later.\n  var array = [];\n  var push = array.push;\n  var slice = array.slice;\n  var splice = array.splice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.1.2';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // custom events. You may bind with `on` or remove with `off` callback\n  // functions to an event; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {\n\n    // Bind an event to a `callback` function. Passing `\"all\"` will bind\n    // the callback to all events fired.\n    on: function(name, callback, context) {\n      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\n      this._events || (this._events = {});\n      var events = this._events[name] || (this._events[name] = []);\n      events.push({callback: callback, context: context, ctx: context || this});\n      return this;\n    },\n\n    // Bind an event to only be triggered a single time. After the first time\n    // the callback is invoked, it will be removed.\n    once: function(name, callback, context) {\n      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\n      var self = this;\n      var once = _.once(function() {\n        self.off(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n      return this.on(name, once, context);\n    },\n\n    // Remove one or many callbacks. If `context` is null, removes all\n    // callbacks with that function. If `callback` is null, removes all\n    // callbacks for the event. If `name` is null, removes all bound\n    // callbacks for all events.\n    off: function(name, callback, context) {\n      var retain, ev, events, names, i, l, j, k;\n      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\n      if (!name && !callback && !context) {\n        this._events = void 0;\n        return this;\n      }\n      names = name ? [name] : _.keys(this._events);\n      for (i = 0, l = names.length; i < l; i++) {\n        name = names[i];\n        if (events = this._events[name]) {\n          this._events[name] = retain = [];\n          if (callback || context) {\n            for (j = 0, k = events.length; j < k; j++) {\n              ev = events[j];\n              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                  (context && context !== ev.context)) {\n                retain.push(ev);\n              }\n            }\n          }\n          if (!retain.length) delete this._events[name];\n        }\n      }\n\n      return this;\n    },\n\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    trigger: function(name) {\n      if (!this._events) return this;\n      var args = slice.call(arguments, 1);\n      if (!eventsApi(this, 'trigger', name, args)) return this;\n      var events = this._events[name];\n      var allEvents = this._events.all;\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, arguments);\n      return this;\n    },\n\n    // Tell this object to stop listening to either specific events ... or\n    // to every object it's currently listening to.\n    stopListening: function(obj, name, callback) {\n      var listeningTo = this._listeningTo;\n      if (!listeningTo) return this;\n      var remove = !name && !callback;\n      if (!callback && typeof name === 'object') callback = this;\n      if (obj) (listeningTo = {})[obj._listenId] = obj;\n      for (var id in listeningTo) {\n        obj = listeningTo[id];\n        obj.off(name, callback, this);\n        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];\n      }\n      return this;\n    }\n\n  };\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Implement fancy features of the Events API such as multiple event\n  // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n  // in terms of the existing API.\n  var eventsApi = function(obj, action, name, rest) {\n    if (!name) return true;\n\n    // Handle event maps.\n    if (typeof name === 'object') {\n      for (var key in name) {\n        obj[action].apply(obj, [key, name[key]].concat(rest));\n      }\n      return false;\n    }\n\n    // Handle space separated event names.\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return false;\n    }\n\n    return true;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n  // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n  // listen to an event in another object ... keeping track of what it's\n  // listening to.\n  _.each(listenMethods, function(implementation, method) {\n    Events[method] = function(obj, name, callback) {\n      var listeningTo = this._listeningTo || (this._listeningTo = {});\n      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n      listeningTo[id] = obj;\n      if (!callback && typeof name === 'object') callback = this;\n      obj[implementation](name, callback, this);\n      return this;\n    };\n  });\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId('c');\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      var attr, attrs, unset, changes, silent, changing, prev, current;\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      unset           = options.unset;\n      silent          = options.silent;\n      changes         = [];\n      changing        = this._changing;\n      this._changing  = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n      current = this.attributes, prev = this._previousAttributes;\n\n      // Check for changes of `id`.\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n      // For each `set` attribute, update or delete the current value.\n      for (attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          this.changed[attr] = val;\n        } else {\n          delete this.changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0, l = changes.length; i < l; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var val, changed = false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      for (var attr in diff) {\n        if (_.isEqual(old[attr], (val = diff[attr]))) continue;\n        (changed || (changed = {}))[attr] = val;\n      }\n      return changed;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server. If the server's representation of the\n    // model differs from its current attributes, they will be overridden,\n    // triggering a `\"change\"` event.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === void 0) options.parse = true;\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        if (!model.set(model.parse(resp, options), options)) return false;\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      var attrs, method, xhr, attributes = this.attributes;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true}, options);\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !options.wait) {\n        if (!this.set(attrs, options)) return false;\n      } else {\n        if (!this._validate(attrs, options)) return false;\n      }\n\n      // Set temporary attributes if `{wait: true}`.\n      if (attrs && options.wait) {\n        this.attributes = _.extend({}, attributes, attrs);\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      if (options.parse === void 0) options.parse = true;\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = model.parse(resp, options);\n        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n          return false;\n        }\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch') options.attrs = attrs;\n      xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      if (attrs && options.wait) this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n\n      var destroy = function() {\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (options.wait || model.isNew()) destroy();\n        if (success) success(model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      if (this.isNew()) {\n        options.success();\n        return false;\n      }\n      wrapError(this, options);\n\n      var xhr = this.sync('delete', this, options);\n      if (!options.wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      return base.replace(/([^\\/])$/, '$1/') + encodeURIComponent(this.id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend(options || {}, { validate: true }));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model.\n  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  _.each(modelMethods, function(method) {\n    Model.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.attributes);\n      return _[method].apply(_, args);\n    };\n  });\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analagous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model){ return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      var singular = !_.isArray(models);\n      models = singular ? [models] : _.clone(models);\n      options || (options = {});\n      var i, l, index, model;\n      for (i = 0, l = models.length; i < l; i++) {\n        model = models[i] = this.get(models[i]);\n        if (!model) continue;\n        delete this._byId[model.id];\n        delete this._byId[model.cid];\n        index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n        this._removeReference(model, options);\n      }\n      return singular ? models[0] : models;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      options = _.defaults({}, options, setOptions);\n      if (options.parse) models = this.parse(models, options);\n      var singular = !_.isArray(models);\n      models = singular ? (models ? [models] : []) : _.clone(models);\n      var i, l, id, model, attrs, existing, sort;\n      var at = options.at;\n      var targetModel = this.model;\n      var sortable = this.comparator && (at == null) && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n      var toAdd = [], toRemove = [], modelMap = {};\n      var add = options.add, merge = options.merge, remove = options.remove;\n      var order = !sortable && add && remove ? [] : false;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      for (i = 0, l = models.length; i < l; i++) {\n        attrs = models[i] || {};\n        if (attrs instanceof Model) {\n          id = model = attrs;\n        } else {\n          id = attrs[targetModel.prototype.idAttribute || 'id'];\n        }\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        if (existing = this.get(id)) {\n          if (remove) modelMap[existing.cid] = true;\n          if (merge) {\n            attrs = attrs === model ? model.attributes : attrs;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(attrs, options);\n          if (!model) continue;\n          toAdd.push(model);\n          this._addReference(model, options);\n        }\n\n        // Do not add multiple models with the same `id`.\n        model = existing || model;\n        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);\n        modelMap[model.id] = true;\n      }\n\n      // Remove nonexistent models if appropriate.\n      if (remove) {\n        for (i = 0, l = this.length; i < l; ++i) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this.remove(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      if (toAdd.length || (order && order.length)) {\n        if (sortable) sort = true;\n        this.length += toAdd.length;\n        if (at != null) {\n          for (i = 0, l = toAdd.length; i < l; i++) {\n            this.models.splice(at + i, 0, toAdd[i]);\n          }\n        } else {\n          if (order) this.models.length = 0;\n          var orderedModels = order || toAdd;\n          for (i = 0, l = orderedModels.length; i < l; i++) {\n            this.models.push(orderedModels[i]);\n          }\n        }\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort events.\n      if (!options.silent) {\n        for (i = 0, l = toAdd.length; i < l; i++) {\n          (model = toAdd[i]).trigger('add', model, this, options);\n        }\n        if (sort || (order && order.length)) this.trigger('sort', this, options);\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options || (options = {});\n      for (var i = 0, l = this.models.length; i < l; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      this.remove(model, options);\n      return model;\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      this.remove(model, options);\n      return model;\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      if (_.isEmpty(attrs)) return first ? void 0 : [];\n      return this[first ? 'find' : 'filter'](function(model) {\n        for (var key in attrs) {\n          if (attrs[key] !== model.get(key)) return false;\n        }\n        return true;\n      });\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      // Run sort based on type of `comparator`.\n      if (_.isString(this.comparator) || this.comparator.length === 1) {\n        this.models = this.sortBy(this.comparator, this);\n      } else {\n        this.models.sort(_.bind(this.comparator, this));\n      }\n\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return _.invoke(this.models, 'get', attr);\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === void 0) options.parse = true;\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success(collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      if (!(model = this._prepareModel(model, options))) return false;\n      if (!options.wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(model, resp) {\n        if (options.wait) collection.add(model, options);\n        if (success) success(model, resp, options);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models);\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (attrs instanceof Model) return attrs;\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      if (model.id != null) this._byId[model.id] = model;\n      if (!model.collection) model.collection = this;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if ((event === 'add' || event === 'remove') && collection !== this) return;\n      if (event === 'destroy') this.remove(model, options);\n      if (model && event === 'change:' + model.idAttribute) {\n        delete this._byId[model.previous(model.idAttribute)];\n        if (model.id != null) this._byId[model.id] = model;\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',\n    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',\n    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',\n    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',\n    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',\n    'lastIndexOf', 'isEmpty', 'chain', 'sample'];\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  _.each(methods, function(method) {\n    Collection.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.models);\n      return _[method].apply(_, args);\n    };\n  });\n\n  // Underscore methods that take a property name as an argument.\n  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];\n\n  // Use attributes instead of properties.\n  _.each(attributeMethods, function(method) {\n    Collection.prototype[method] = function(value, context) {\n      var iterator = _.isFunction(value) ? value : function(model) {\n        return model.get(value);\n      };\n      return _[method](this.models, iterator, context);\n    };\n  });\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    options || (options = {});\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be merged as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this.$el.remove();\n      this.stopListening();\n      return this;\n    },\n\n    // Change the view's element (`this.el` property), including event\n    // re-delegation.\n    setElement: function(element, delegate) {\n      if (this.$el) this.undelegateEvents();\n      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n      this.el = this.$el[0];\n      if (delegate !== false) this.delegateEvents();\n      return this;\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    // This only works for delegate-able events: not `focus`, `blur`, and\n    // not `change`, `submit`, and `reset` in Internet Explorer.\n    delegateEvents: function(events) {\n      if (!(events || (events = _.result(this, 'events')))) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[events[key]];\n        if (!method) continue;\n\n        var match = key.match(delegateEventSplitter);\n        var eventName = match[1], selector = match[2];\n        method = _.bind(method, this);\n        eventName += '.delegateEvents' + this.cid;\n        if (selector === '') {\n          this.$el.on(eventName, method);\n        } else {\n          this.$el.on(eventName, selector, method);\n        }\n      }\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view with `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);\n        this.setElement($el, false);\n      } else {\n        this.setElement(_.result(this, 'el'), false);\n      }\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // If we're sending a `PATCH` request, and we're in an old Internet Explorer\n    // that still has ActiveX enabled by default, override jQuery to use that\n    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\n    if (params.type === 'PATCH' && noXhrPatch) {\n      params.xhr = function() {\n        return new ActiveXObject(\"Microsoft.XMLHTTP\");\n      };\n    }\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  var noXhrPatch =\n    typeof window !== 'undefined' && !!window.ActiveXObject &&\n      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch':  'PATCH',\n    'delete': 'DELETE',\n    'read':   'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        router.execute(callback, args);\n        router.trigger.apply(router, ['route:' + name].concat(args));\n        router.trigger('route', name, args);\n        Backbone.history.trigger('route', router, name, args);\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    _.bindAll(this, 'checkUrl');\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for detecting MSIE.\n  var isExplorer = /msie [\\w.]+/;\n\n  // Cached regex for removing a trailing slash.\n  var trailingSlash = /\\/$/;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      return this.location.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the cross-browser normalized URL fragment, either from the URL,\n    // the hash, or the override.\n    getFragment: function(fragment, forcePushState) {\n      if (fragment == null) {\n        if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n          fragment = decodeURI(this.location.pathname + this.location.search);\n          var root = this.root.replace(trailingSlash, '');\n          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error(\"Backbone.history has already been started\");\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);\n      var fragment          = this.getFragment();\n      var docMode           = document.documentMode;\n      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      if (oldIE && this._wantsHashChange) {\n        var frame = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\">');\n        this.iframe = frame.hide().appendTo('body')[0].contentWindow;\n        this.navigate(fragment);\n      }\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._hasPushState) {\n        Backbone.$(window).on('popstate', this.checkUrl);\n      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n        Backbone.$(window).on('hashchange', this.checkUrl);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      // Determine if we need to change the base url, for a pushState link\n      // opened by a non-pushState browser.\n      this.fragment = fragment;\n      var loc = this.location;\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          this.fragment = this.getFragment(null, true);\n          this.location.replace(this.root + '#' + this.fragment);\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot() && loc.hash) {\n          this.fragment = this.getHash().replace(routeStripper, '');\n          this.history.replaceState({}, document.title, this.root + this.fragment);\n        }\n\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n      if (current === this.fragment && this.iframe) {\n        current = this.getFragment(this.getHash(this.iframe));\n      }\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.any(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      var url = this.root + (fragment = this.getFragment(fragment || ''));\n\n      // Strip the hash for matching.\n      fragment = fragment.replace(pathStripper, '');\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // Don't include a trailing slash on the root.\n      if (fragment === '' && url !== '/') url = url.slice(0, -1);\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._hasPushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if(!options.replace) this.iframe.document.open().close();\n          this._updateHash(this.iframe.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain, for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent's constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function.\n    var Surrogate = function(){ this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate;\n\n    // Add prototype properties (instance properties) to the subclass,\n    // if supplied.\n    if (protoProps) _.extend(child.prototype, protoProps);\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error(model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n\n}));\n\n","define(\n    'region',[\"underscore\"],\n    function( _ ){\n        var Region = function( parent, selector ){\n            this.output = parent.find( selector );\n\n            this._renderable = undefined;\n            this._viewData = {};\n        };\n\n        Region.prototype.render = function(){\n            this._renderable.prototype.el = this.output;\n\n            var regionRenderable = new this._renderable( this._viewData ),\n                layout;\n\n            if( _( regionRenderable ).has( \"_regions\" ) ){\n                regionRenderable.setElement( this.output );\n                layout = regionRenderable.render();\n\n                this.regions = layout.regions;\n            }\n        };\n\n        Region.prototype.show = function( renderable, optionalViewData ){\n            this._renderable = renderable;\n            this._viewData = optionalViewData;\n\n            this.render();\n        };\n\n        return Region;\n    }\n);\n\n","define(\n    'layout',[\"backbone\", \"underscore\", \"region\"],\n    function( Backbone, _, Region ){\n        var Layout = function(){\n            this._regions = {};\n            this._presets = {};\n            this._el = \"\";\n            this._template = \"\";\n            this._currentView = undefined;\n        };\n\n        Layout.prototype.addRegions = function( regions ){\n            var self = this;\n\n            _( regions ).each( function( selector, name ){\n                self.addRegion( name, selector );\n            });\n\n            return this;\n        };\n\n        Layout.prototype.addRegion = function( name, selector ){\n            this._regions[ name ] = selector;\n\n            return this;\n        };\n\n        Layout.prototype.setElement = function( selector ){\n            this._el = selector;\n\n            return this;\n        };\n\n        Layout.prototype.setTemplate = function( html ){\n            this._template = html;\n\n            return this;\n        };\n\n        Layout.prototype.addPresets = function( presets ){\n            var self = this;\n\n            _( presets ).each( function( preset, name ){\n                self._presets[ name ] = preset;\n            });\n\n            return this;\n        };\n\n        Layout.prototype.addPreset = function( name, renderable ){\n            this._presets[ name ] = renderable;\n        };\n\n        Layout.prototype.render = function( layoutData ){\n            var view = this.createView( this._el, this._template, layoutData, this._regions ),\n                self = this;\n\n            this._currentView = new view();\n            this.regions = this._regions;\n\n            _( this._presets ).each( function( renderable, name ){\n                self.regions[ name ].show( renderable.object, renderable.data );\n            });\n\n            return this;\n        };\n\n        Layout.prototype.explore = function( path ){\n            if( !this.regions ){\n                throw new Error( \"The layout must be rendered in order to explore regions.\" );\n            }\n            else{\n                var steps = path.split( /[\\.:]/ ),\n                    region = this,\n                    count = 0,\n                    name = \"this layout\";\n\n                _( steps ).each( function( step ){\n                    if( _( region ).has( \"regions\" ) ){\n                        if( _( region.regions ).has( step ) ){\n                            region = region.regions[ step ];\n                        }\n                        else{\n                            throw new Error( '\"' + step + '\" is not a region inside \"' + name + '\".' );\n                        }\n                    }\n                    else if( _( steps ).size() !== count ){\n                        throw new Error( '\"' + name + '\" does not contain regions.' );\n                    }\n\n                    count++;\n                    name = step;\n                });\n\n                return region;\n            }\n        };\n\n        Layout.prototype.createView = function( el, tmpl, layoutData, regions ){\n            var self = this;\n\n            return Backbone.View.extend({\n                \"el\": el,\n                \"template\": _.template( tmpl ),\n\n                \"render\": function(){\n                    this.$el.html( this.template( layoutData ) );\n                    self.createRegions( regions, this.$el );\n\n                    return this;\n                },\n\n                \"initialize\": function(){\n                    this.render();\n                }\n            });\n        };\n\n        Layout.prototype.createRegions = function( regions, parent ){\n            var self = this;\n\n            _( regions ).each( function( selector, name ){\n                self._regions[ name ] = new Region( parent, selector );\n            });\n        };\n\n        return Layout;\n    }\n);\n\n","define(\n    'ribcage',[\"layout\"],\n    function( Layout ){\n        return Layout;\n    }\n);\n\n"]}